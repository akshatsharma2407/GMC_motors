name: CI

on: 
  push:
    branches:
      - master

jobs:
  linting:
    runs-on: 'ubuntu-latest'

    steps:

      - name: code checkout
        uses: actions/checkout@v3
      
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name : install flake8
        run : |
            python -m pip install --upgrade pip
            pip install flake8
      
      - name : run flake8
        run : |
             flake8 src/ --config .flake8
  
  project_testing:
    needs: linting

    runs-on: 'ubuntu-latest'
    
    steps:
      - name: code checkout
        uses: actions/checkout@v3
      
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      
      - name: cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: run pipeline
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run : |
          dvc repro

      - name: Run model tests
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python -m unittest tests/test_model.py
      
      - name: promote model to production
        if: success()
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model
      
      - name: Run flask app tests
        if: success()
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python -m unittest tests/test_flask.py
      
      - name: login to AWS ECR
        run:  |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com
      
      - name: Build docker image
        run: |
          docker build -t gmc_ecr_ci .
      
      - name: Tag Docker image
        run: |
          docker tag gmc_ecr_ci:latest 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com/gmc_ecr_ci:latest
      
      - name: push docker image to ecr
        run: |
          docker push 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com/gmc_ecr_ci:latest
      
      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ap-southeast-2
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com
            docker pull 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com/gmc_ecr_ci:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d -p -e DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }} --name my-app 851725541946.dkr.ecr.ap-southeast-2.amazonaws.com/gmc_ecr_ci:latest