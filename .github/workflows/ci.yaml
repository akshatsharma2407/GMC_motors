name: CI

on: 
  push:
    branches:
      - master

jobs:
  linting:
    runs-on: 'ubuntu-latest'

    steps:

      - name: code checkout
        uses: actions/checkout@v3
      
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name : install flake8
        run : |
            python -m pip install --upgrade pip
            pip install flake8
      
      - name : run flake8
        run : |
             flake8 src/ --config .flake8
  
  project_testing:
    needs: linting

    runs-on: 'ubuntu-latest'
    
    steps:
      - name: code checkout
        uses: actions/checkout@v3
      
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      
      - name: cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: run pipeline
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run : |
          dvc repro

      - name: Run model tests
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python -m unittest tests/test_model.py
      
      - name: promote model to production
        if: success()
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model
      
      - name: Run flask app tests
        if: success()
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python -m unittest tests/test_flask.py
      
      - name: login to AWS ECR
        run:  |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 851725541946.dkr.ecr.ap-south-1.amazonaws.com
      
      - name: Build docker image
        run: |
          docker build -t gmcdocker .
      
      - name: Tag Docker image
        run: |
          docker tag gmcdocker:latest 851725541946.dkr.ecr.ap-south-1.amazonaws.com/gmcdocker:latest
      
      - name: push docker image to ecr
        run: |
          docker push 851725541946.dkr.ecr.ap-south-1.amazonaws.com/gmcdocker:latest
      
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://gmccodedeployservice/deployment.zip

      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name dockerappwithcodedeploy \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name codedeployDeploymentGroup \
            --s3-location bucket=gmccodedeployservice,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1